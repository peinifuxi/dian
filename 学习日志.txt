从上周日开始着手完成工程方向题目，
预备阶段：开始下载要求使⽤的操作系统 linux 
          配置好环境
          b站了学习makefile的语法规则和github的使用
明确目的：1.这一阶段真让我感到很疑惑，因为刚学习了makefile的语法，然后发现构建的检查
          函数，跟makefile中的规则一模一样，但构建依赖图又不一样，后面的时间戳又是
         一样的，导致在构建函数的时候云里雾里的
        2. 后来，感觉到题目的目的就是让我们搭建出一套完整的makefile语法，进而实现make
        的功能，然后才有了明确的方向
        3.但当时看到题目文件中“案例使⽤⽅法：minimake app# 通过第⼆个参数指定⽬标”
        便认为，最终的minimake并不是一个可执行文件，没有通过./调用，而minimake是一个
        文本文件，然后通过一系列的函数，使这个文本文件具有了makefile的功能，按照这个
        思路试了一下，发现调用函数还是需要make指令，随后便放弃了这个想法
        4.最后才确定好了目标是构建一个可执行文件minimake，通过函数实现makefile的语法
        规则
构建过程：1.感觉这部分主要的就是学习一些新函数的用法吧，比如argc,argv，时间戳有关的函数
        ，fork，execvp，waitpid，但是会用即可，难度也没那么大
        2.然后就是分模块构建的思路，涉及的函数比较多，不分模块代码会过长，并且报错不好处理
        说到报错，感觉这部分最折磨的就是处理报错了，印象最深的一个错误就是，我的目标文件是
        hello（空格）,然后解析makefile的时候就把空格也存上去了，导致我在检查目标文件是否
        存在时一直显示不存在，检查了好多遍是否存在的函数都没发现问题，最后才发现是一个小
        小的空格导致的问题
        3.生成依赖图和拓扑排序可以说是最麻烦的了，大量使用了结构体，还用到了图和队列的相关
        知识，完成起来十分复杂
        4.最后一步处理变量也困惑了我一段时间，因为变量的引入，会导致解析函数和检查函数都
        要跟着更改，甚至会牵连到生成图，以及生成文件的函数，感觉有点牵一发而动全身，后来
        想到了能直接在解析makefile时直接展开变量，这才豁然开朗
总的来说，这次完成工程开发的题目还是让我挺受益匪浅的
